//
//  ProductDetailViewController.swift
//  contentstack-ecommerce-app
//
//  Created by Uttam Ukkoji on 03/12/18.
//  Copyright (c) 2018 Contentstack. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ProductDetailDisplayLogic: class
{
    func showDetails(viewModel: ProductDetail.ViewModel)
    func showRelatedProductView()
}

class ProductDetailViewController: UIViewController, ProductDetailDisplayLogic
{
    
    @IBOutlet weak var tableView: UITableView!
    var interactor: ProductDetailBusinessLogic?
    var router: (NSObjectProtocol & ProductDetailRoutingLogic & ProductDetailDataPassing)?
    var viewModel = ProductDetail.ViewModel()
    var relatedProducts: [String]?
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ProductDetailInteractor()
        let presenter = ProductDetailPresenter()
        let router = ProductDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.title = "Product Detail"
        tableView.registerNib(ProductInfoCell.self)
        tableView.registerNib(ProductDescCell.self)
        tableView.registerNib(ProductPriceCell.self)
        tableView.tableFooterView = UIView()
        tableView.estimatedRowHeight = 999
        tableView.rowHeight = UITableView.automaticDimension
        showProductDetails()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func showProductDetails()
    {
        let request = ProductDetail.Request(productID: router!.dataStore!.productID)
        interactor?.getProduct(request: request)
    }
    
    func showDetails(viewModel: ProductDetail.ViewModel) {
        self.viewModel = viewModel
    }
    
    @objc func showRelatedProducts()  {
        if let relatedProduct = relatedProducts {
            interactor?.showRelated(products: relatedProduct)
        }
    }
    
    func showRelatedProductView() {
        self.performSegue(withIdentifier: "show_productList", sender: nil)
    }
}

extension ProductDetailViewController: UITableViewDataSource, UITableViewDelegate {
    func numberOfSections(in tableView: UITableView) -> Int {
        return viewModel.numberOfSection()
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return viewModel.numberOfRow(in: section)
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let model = viewModel.productDetailArray[indexPath.section]
        if let info = model as? ProductDetail.ViewModel.ProductInfo {
            let cell = tableView.dequeueReusableCell(for: indexPath) as ProductInfoCell
            cell.productImage.loadImage(urlString: info.imageUrl)
            cell.productTitle.text = info.title
            return cell
        }else if let price = model as? ProductDetail.ViewModel.ProductPrice {
            let cell = tableView.dequeueReusableCell(for: indexPath) as ProductPriceCell
            var priceString = "$\(price.price)"
            if price.offerPrice > 0 {
                priceString = "<h2><del>\(priceString)</del> Now available at <b style= \"background: #00e58b;color: #ffffff;\"> $\(price.offerPrice) </b></h2>"
            }
            cell.productPrice.attributedText = priceString.htmlToAttributedString
            return cell
        }else {
            let description = model as! ProductDetail.ViewModel.ProductDesc
            let cell = tableView.dequeueReusableCell(for: indexPath) as ProductDescCell
            cell.relatedProducts.isHidden = true
            if let product = description.relatedProducts {
                relatedProducts = product
                cell.relatedProducts.isHidden = false
                cell.relatedProducts.addTarget(self, action: #selector(showRelatedProducts), for: UIControl.Event.touchUpInside)
            }
            cell.Productdesc.text = description.string?.string
            cell.addToCart.isHidden = !description.isInStock
            return cell
        }
    }
    
    
}
