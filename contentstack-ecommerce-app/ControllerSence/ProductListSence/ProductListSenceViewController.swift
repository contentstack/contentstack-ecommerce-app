//
//  ProductListSenceViewController.swift
//  contentstack-ecommerce-app
//
//  Created by Uttam Ukkoji on 03/12/18.
//  Copyright (c) 2018 Contentstack. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ProductListSenceDisplayLogic: class
{
    func getProducts(request: ProductListSence.Products.Request)
    func reloadWithData(response: ProductListSence.Products.Response)
    func showProductDetails()
}

class ProductListSenceViewController: UIViewController, ProductListSenceDisplayLogic
{
    @IBOutlet weak var collectionView: UICollectionView!
    var interactor: ProductListSenceBusinessLogic?
    var router: (NSObjectProtocol & ProductListSenceRoutingLogic & ProductListSenceDataPassing)?
    var categoryId : String?
    var productArray: [Product] = []
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ProductListSenceInteractor()
        let presenter = ProductListSencePresenter()
        let router = ProductListSenceRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.title = "Products"
        if let flowdelegate = collectionView.collectionViewLayout as? UICollectionViewFlowLayout {
            let width = (UIScreen.main.bounds.width - 30)/2
            flowdelegate.itemSize = CGSize(width: width, height: width)
        }
        collectionView.registerNib(ProductCell.self)
        if router!.dataStore!.products.count > 0, let productList = router?.dataStore?.products {
            self.title = "Related Products"
            getProducts(request: ProductListSence.Products.Request(categoryID: nil, productList: productList))
        }else {
            AppDelegate.shared.persistentContainer.viewContext.deleteAll(Product.self)
            getProductList()
        }
    }
    
    // MARK: Do something
    //@IBOutlet weak var nameTextField: UITextField!
    
    func getProductList()
    {
        let request = ProductListSence.Products.Request(categoryID: categoryId, productList: nil)
        interactor?.getProductsList(request: request)
    }
    func getProducts(request: ProductListSence.Products.Request) {
        interactor?.fetchProductList(request: request)
    }
    
    func showProductDetails() {
        self.performSegue(withIdentifier: "show_details", sender: nil)
    }
    
    func reloadWithData(response: ProductListSence.Products.Response) {
        productArray = response.productArray
        self.collectionView.reloadData()
    }
}

extension ProductListSenceViewController: UICollectionViewDataSource {
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return productArray.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(for: indexPath) as ProductCell
        let product = productArray[indexPath.row]
        cell.productName.text = product.title
        cell.productPrice.text = "\(product.offetPrice != 0 ? product.offetPrice : product.price)"
        cell.productImage.loadImage(urlString: product.featuredImage)
        return cell
    }
}

extension ProductListSenceViewController: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
       self.interactor?.showProductDetails(productId: productArray[indexPath.row].uid!)
    }
}
