//
//  ProductListSenceInteractor.swift
//  contentstack-ecommerce-app
//
//  Created by Uttam Ukkoji on 03/12/18.
//  Copyright (c) 2018 Contentstack. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData
import Contentstack
protocol ProductListSenceBusinessLogic
{
    func getProductsList(request: ProductListSence.Products.Request)
    func fetchProductList(request: ProductListSence.Products.Request)
    func showProductDetails(productId : String)
}

protocol ProductListSenceDataStore
{
    var productID : String {get}
    var products: [String] {get set}

}

class ProductListSenceInteractor: ProductListSenceBusinessLogic, ProductListSenceDataStore
{
    
    var productID: String = ""
    var products: [String] = []

    var presenter: ProductListSencePresentationLogic?
    var worker: ProductListSenceWorker?
    
    // MARK: Do something
    func getProductsList(request: ProductListSence.Products.Request) {
        worker = ProductListSenceWorker()
        worker?.getProduct(request: request, onCompletion: { (queryResult, error) -> (Void) in
            guard let qResult = queryResult, let result = qResult.getResult() as? [Entry] else {return}
            let backgroundContext = AppDelegate.shared.persistentContainer.newBackgroundContext()
            
            for entry in result {
                let predicate = NSPredicate(format: "uid = %@", entry.uid)
                let product = backgroundContext.findOrCreate(Product.self, predicate: predicate)
                product.uid = entry.uid
                product.title = entry.title
                product.desc = entry.object(forKey: "description") as? String
                product.categories = request.categoryID
                if let relatedProduct = entry.object(forKey: "related_products") as? [String] {
                    product.relatedProducts = relatedProduct
                }
                if let featuredImage = entry.object(forKey: "featured_image") as? [[AnyHashable: Any]], featuredImage.count > 0  {
                    if let url = featuredImage[0]["url"] as? String{
                        product.featuredImage = url
                    }
                }
                product.in_stock = entry.object(forKey: "in_stock") as? Bool ?? false
                product.price = entry.object(forKey: "price") as? Double ?? 0
                product.offetPrice = entry.object(forKey: "offer_price") as? Double ?? 0
                product.date = entry.updatedAt
                print(product)
            }
            do {
                try backgroundContext.save()
            }catch {
                
            }
            self.presenter?.loadProductList(request: request)
        })
    }
    
    func fetchProductList(request: ProductListSence.Products.Request) {
        worker = ProductListSenceWorker()
        let response = worker!.fetchProduct(request: request)
        presenter?.showProductList(response: response)
    }
    
    func showProductDetails(productId: String) {
        self.productID = productId
        presenter?.showProductDetails()
    }
}

